{"version":3,"sources":["components/ScoreBoard/index.jsx","components/GamePixel/index.jsx","Games/SnakeGame/GameBoard.jsx","Games/SnakeGame/GameMessage.jsx","Games/SnakeGame/ArrowButtons.jsx","Games/SnakeGame/index.jsx","Games/SnakeGame/onKeyPressed.js","Games/SnakeGame/Instructions.jsx","index.js","App2.jsx"],"names":["ScoreBoard","props","react_default","a","createElement","className","playerName","score","GamePixel","pixelHeight","pixelWidth","pixelType","style","height","width","key","GameBoard","_ref","gridSize","apple","isSnake","Object","toConsumableArray","Array","map","e","rowIndex","columnIndex","GamePixel_GamePixel","x","y","GameMessage","isPlaying","class","ArrowButtons","type","onClick","endGame","stopGame","startGame","alert","console","log","setVelocity","reverseDirection","trail","PlayerPosition","snakeSize","gameTick","velocity","Math","floor","random","totalTime","cutOffTime","direction","SnakeGame","_useState","useState","_useState2","slicedToArray","setIsPlaying","_useState3","_useState5","setPlayerPosition","useEffect","document","addEventListener","handleKeyPress","removeEventListener","window","scrollTo","setWormMessage","Fragment","toFixed","setVelocity2","code","preventDefault","onKeyPressed","payload","game","newXPosition","newYPosition","push","unshift","length","takeRight","take","setInterval","clearInterval","find","obj","Instructions","acceptButtonMessage","setAcceptButtonMessage","onDoubleClick","setInstructionDivVisibile","ReactDOM","render","wormMessage","_useState4","instructionDivVisibile","_useState6","setPlayerName","src","alt","htmlFor","placeholder","id","maxLength","value","onChange","target","onFocus","select","getElementById"],"mappings":"mPAEe,SAASA,EAAWC,GAC/B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCAAmCJ,EAAMK,YAAc,eACvEJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCAAhB,SAAyDJ,EAAMM,OAAS,gCCN7E,SAASC,EAAUP,GAC9B,IAAIQ,EAAcR,EAAMQ,aAAe,OACnCC,EAAaT,EAAMS,YAAc,OACrC,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMU,UAAWC,MAAO,CAAEC,OAAQJ,EAAaK,MAAOJ,IACjET,EAAMc,KCLJ,SAASC,EAATC,GAAiD,IAA5BC,EAA4BD,EAA5BC,SAAUC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,QACjD,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACVgB,OAAAC,EAAA,EAAAD,CAAIE,MAAML,IAAWM,IAAI,SAACC,EAAGC,GAAJ,OACtBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYU,IAAKW,GAExBL,OAAAC,EAAA,EAAAD,CAAIE,MAAML,IAAWM,IAAI,SAACC,EAAGE,GAAJ,OACrBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGU,IAAKW,EAAW,IAAMC,GACpCzB,EAAAC,EAAAC,cAACwB,EAAD,CAAWjB,UACNQ,EAAMU,IAAMH,GAAYP,EAAMW,IAAMH,EAAe,UAChDP,EAAQM,EAAUC,GAAe,QAC7B,kBCZ7B,SAASI,EAAY9B,GAEhC,OACIC,EAAAC,EAAAC,cAAA,WACyB,YAApBH,EAAM+B,UACH9B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,gDACoB,UAApBJ,EAAM+B,UACF9B,EAAAC,EAAAC,cAAA,OAAK6B,MAAM,2BACP/B,EAAAC,EAAAC,cAAA,OAAK6B,MAAM,eAAX,uBACA/B,EAAAC,EAAAC,cAAA,OAAK6B,MAAM,aACP/B,EAAAC,EAAAC,cAAA,MAAI6B,MAAM,eAAV,QAA8BhC,EAAMK,YACpCJ,EAAAC,EAAAC,cAAA,KAAG6B,MAAM,aAAT,4BAA+ChC,EAAMM,SAGzC,WAApBN,EAAM+B,UACF9B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,gDACoB,eAApBJ,EAAM+B,UACF9B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,6CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBClB1B,SAAS6B,EAAajC,GAEjC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAASF,MAAM,kBAAkBG,QAAS,WAAQnC,EAAMoC,YAArE,QACAnC,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAASF,MAAM,kBAAkBG,QAAS,WAC3B,YAApBnC,EAAM+B,UACN/B,EAAMqC,WACmB,WAApBrC,EAAM+B,WAA8C,UAApB/B,EAAM+B,WAA6C,eAApB/B,EAAM+B,UAC1E/B,EAAMsC,aAENC,MAAM,aACNC,QAAQC,IAAIzC,MAPpB,eAYJC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAASF,MAAM,kBAAkBG,QAAS,kBAAMnC,EAAM0C,YAAY,CAAEd,GAAI,EAAGC,EAAG,MAA3F,YADJ,IACuH5B,EAAAC,EAAAC,cAAA,WACnHF,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAASF,MAAM,kBAAkBG,QAAS,kBAAMnC,EAAM0C,YAAY,CAAEd,EAAG,EAAGC,GAAI,MAA3F,YACA5B,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAASF,MAAM,kBAAkBG,QAAS,kBAAMnC,EAAM0C,YAAY,CAAEd,EAAG,EAAGC,EAAG,MAA1F,YACA5B,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAASF,MAAM,kBAAkBG,QAAS,kBAAMnC,EAAM0C,YAAY,CAAEd,EAAG,EAAGC,EAAG,MAA1F,aAEJ5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,UAAQ+B,KAAK,SAASF,MAAM,kBAAkBG,QAAS,kBAAMnC,EAAM2C,qBAAnE,aClBhB,IAAIC,EAAQ,CAAC,CAAEhB,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,KACzFgB,EAAiB,CAAEjB,EAAG,GAAIC,EAAG,IAC7BiB,EAAY,EACZC,EAAW,KACXC,EAAW,CAAEpB,EAAG,EAAGC,EAAG,GACtBZ,EAAW,GACXC,EAAQ,CACRU,EAAGqB,KAAKC,MAAMD,KAAKE,SAAWlC,GAC9BY,EAAGoB,KAAKC,MAAMD,KAAKE,SAAWlC,IAE9BmC,EAAY,EACZC,EAAa,EACbC,EAAY,UACD,SAASC,EAAUvD,GAC9BiB,EAAWjB,EAAMiB,SADoB,IAAAuC,EAEHC,mBAAS,cAFNC,EAAAtC,OAAAuC,EAAA,EAAAvC,CAAAoC,EAAA,GAE9BzB,EAF8B2B,EAAA,GAEnBE,EAFmBF,EAAA,GAAAG,EAGbJ,mBAAS,CAAE7B,EAAG,EAAGC,EAAG,IAAnCa,EAH4BtB,OAAAuC,EAAA,EAAAvC,CAAAyC,EAAA,MAAAC,EAIPL,mBAAS,CAAE7B,EAAG,GAAIC,EAAG,KAA1CkC,EAJ4B3C,OAAAuC,EAAA,EAAAvC,CAAA0C,EAAA,MAmBrC,OAZAE,oBAAU,WAEN,OADAC,SAASC,iBAAiB,UAAWC,GAC9B,WACHF,SAASG,oBAAoB,UAAWD,KAE7C,IACHH,oBAAU,WACNK,OAAOC,SAAS,EAAG,IACpB,IACHN,oBAAU,WAmCFZ,GAAa,GACbpD,EAAMuE,eAAe,oCACdnB,EAAY,IAAMA,GAAa,GACtCpD,EAAMuE,eAAe,mDAEhBnB,EAAY,IAAMA,GAAa,GACpCpD,EAAMuE,eAAe,oCAEhBnB,EAAY,IACjBpD,EAAMuE,eAAe,kDAxCzBtE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsE,SAAA,KACIvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACJ,EAAD,CAAYM,WAAYL,EAAMK,WAAYC,MAAO8C,EAAUqB,QAAQ,KACnExE,EAAAC,EAAAC,cAAC2B,EAAD,CAAaxB,MAAO8C,EAAUqB,QAAQ,GAAIpE,WAAYL,EAAMK,WAAY0B,UAAWA,IACnF9B,EAAAC,EAAAC,cAACY,EAAD,CAAWE,SAAUjB,EAAMiB,SAAUC,MAAOA,EAAOC,QAASA,MAGpElB,EAAAC,EAAAC,cAAC8B,EAAD,CACIF,UAAWA,EACXO,UAAWA,EACXD,SAAUA,EACVK,YAAagC,EACb/B,iBAAkBA,EAClBP,QAASA,IACbnC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0GAAiGF,EAAAC,EAAAC,cAAA,WAAjG,8CAC+CF,EAAAC,EAAAC,cAAA,WAD/C,4CAE6CF,EAAAC,EAAAC,cAAA,WAF7C,mDAGoDF,EAAAC,EAAAC,cAAA,WAHpD,+KAIgLF,EAAAC,EAAAC,cAAA,WAJhL,2GAK4GF,EAAAC,EAAAC,cAAA,WAL5G,iCAyBhB,SAASgE,EAAe3C,ICtFrB,SAAsBA,EAAGc,EAAWD,EAAUW,EAAUN,EAAaC,EAAkBP,GAE1F,OAAQZ,EAAEmD,MACN,IAAK,QACL,IAAK,QACDnD,EAAEoD,iBACFtC,IACA,MACJ,IAAK,SACDD,IACA,MACJ,IAAK,OACL,IAAK,YACDb,EAAEoD,iBACFlC,EAAY,CAAEd,EAAG,EAAGC,GAAI,IACxB,MACJ,IAAK,OACL,IAAK,UACDL,EAAEoD,iBACFlC,EAAY,CAAEd,GAAI,EAAGC,EAAG,IACxB,MACJ,IAAK,OACL,IAAK,aACDL,EAAEoD,iBACFlC,EAAY,CAAEd,EAAG,EAAGC,EAAG,IACvB,MACJ,IAAK,OACL,IAAK,YACDL,EAAEoD,iBACFlC,EAAY,CAAEd,EAAG,EAAGC,EAAG,IACvB,MACJ,IAAK,OACDc,IACA,MACJ,IAAK,OACDP,KDoDJyC,CAAarD,EAAGc,EAAWD,EAAUW,EAAU0B,EAAc/B,EAAkBP,GAcnF,SAASsC,EAAaI,GAClB9B,EAAW8B,EACXpC,EAAYoC,GAGhB,SAASC,IAEL3B,GAAa,GACbC,GAAc,GACd,IAAI2B,EAAenC,EAAejB,EAAIoB,EAASpB,EAC3CqD,EAAepC,EAAehB,EAAImB,EAASnB,EAE3CmD,EAAe,EACfA,EAAehF,EAAMiB,SAAW,EAE3B+D,EAAehF,EAAMiB,SAAW,IACrC+D,EAAe,GAEfC,EAAe,EACfA,EAAejF,EAAMiB,SAAW,EAE3BgE,EAAejF,EAAMiB,SAAW,IACrCgE,EAAe,GAEnBlB,EAAkB,CAAEnC,EAAGoD,EAAcnD,EAAGoD,IACxCpC,EAAiB,CAAEjB,EAAGoD,EAAcnD,EAAGoD,GACnC9D,EAAQ6D,EAAcC,GAIR,YAAd3B,EACAV,EAAMsC,KAAK,CAAEtD,EAAGoD,EAAcnD,EAAGoD,IAGjCrC,EAAMuC,QAAQ,CAAEvD,EAAGoD,EAAcnD,EAAGoD,IAIpCrC,EAAMwC,OAAStC,IAGfF,EAAsB,YAAdU,EAA0B+B,oBAAUzC,EAAOE,GAAawC,eAAK1C,EAAOE,IAG5E5B,EAAMU,IAAMoD,GAAgB9D,EAAMW,IAAMoD,IAGxCnC,GAAa,EACb5B,EAAQ,CACJU,EAAGqB,KAAKC,MAAMD,KAAKE,SAAWnD,EAAMiB,UACpCY,EAAGoB,KAAKC,MAAMD,KAAKE,SAAWnD,EAAMiB,YAGxCoC,GAAc,IACdA,EAAa,EACTP,GAAa,GACbV,IAEJU,GAAa,GAGrB,SAASR,IACLM,EAAQ,CAAC,CAAEhB,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,GAAK,CAAED,EAAG,GAAIC,EAAG,KACzFgB,EAAiB,CAAEjB,EAAG,GAAIC,EAAG,IAC7BiB,EAAY,EACZC,EAAW,KACXC,EAAW,CAAEpB,EAAG,EAAGC,EAAG,GACtBZ,EAAW,GACM,cAAbc,IACAb,EAAQ,CACJU,EAAGqB,KAAKC,MAAMD,KAAKE,SAAWlC,GAC9BY,EAAGoB,KAAKC,MAAMD,KAAKE,SAAWlC,KAGtCmC,EAAY,EACZL,EAAWwC,YAAYR,EAAM,KAC7BnB,EAAa,WAEjB,SAASvB,IACLmD,cAAczC,GACdA,EAAW,KACXa,EAAa,UAEjB,SAASxB,IACLC,IACAuB,EAAa,SAEjB,SAASjB,IACLE,EAA+B,YAAdS,EAA0BgC,eAAK1C,GAAO,GAAKyC,oBAAUzC,GAAO,GAC7EI,EAAW,CACPpB,GAAiB,EAAdoB,EAASpB,EACZC,GAAiB,EAAdmB,EAASnB,GAIhByB,EAA0B,YAAdA,EAA0B,UAAY,UAGtD,SAASnC,EAAQS,EAAGC,GAChB,QAAIe,EAAM6C,KAAK,SAAAC,GAAG,OAAIA,EAAI9D,IAAMA,GAAK8D,EAAI7D,IAAMA,KEtMxC,SAAS8D,EAAa3F,GAAO,IAAAwD,EACcC,mBAAS,WADvBC,EAAAtC,OAAAuC,EAAA,EAAAvC,CAAAoC,EAAA,GACjCoC,EADiClC,EAAA,GACZmC,EADYnC,EAAA,GAExC,OACIzD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsE,SAAA,KACIvE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,ohBAMqDJ,EAAMK,WAN3D,mGASAJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACdH,EAAAC,EAAAC,cAAA,0GACkGF,EAAAC,EAAAC,cAAA,WADlG,8CAE+CF,EAAAC,EAAAC,cAAA,WAF/C,4CAG6CF,EAAAC,EAAAC,cAAA,WAH7C,mDAIoDF,EAAAC,EAAAC,cAAA,WAJpD,+KAKgLF,EAAAC,EAAAC,cAAA,WALhL,2GAM4GF,EAAAC,EAAAC,cAAA,WAN5G,6BAO8BF,EAAAC,EAAAC,cAAA,YAE9BF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SACTH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBACd+B,QAAS,kBAAM0D,EAAuB,oDACtCC,cAAe,SAACtE,GACZA,EAAEoD,iBACF5E,EAAM+F,2BAA0B,KAEnCH,GAEoB,oDAAxBA,EACG3F,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,WAA7B,6BACA,MAERF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,2ECjCZ4F,IAASC,OAAOhG,EAAAC,EAAAC,cCDD,WAAgB,IAAAqD,EACWC,mBAAS,qBADpBC,EAAAtC,OAAAuC,EAAA,EAAAvC,CAAAoC,EAAA,GACpB0C,EADoBxC,EAAA,GACPa,EADOb,EAAA,GAAAG,EAEiCJ,oBAAS,GAF1C0C,EAAA/E,OAAAuC,EAAA,EAAAvC,CAAAyC,EAAA,GAEpBuC,EAFoBD,EAAA,GAEIJ,EAFJI,EAAA,GAAArC,EAGSL,mBAAS,YAAcR,KAAKC,MAAsB,IAAhBD,KAAKE,WAHhDkD,EAAAjF,OAAAuC,EAAA,EAAAvC,CAAA0C,EAAA,GAGpBzD,EAHoBgG,EAAA,GAGRC,EAHQD,EAAA,GAI3B,OACIpG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OACIoG,IAAI,qBACJC,IAAI,kBACJpG,UAAU,8CACV+B,QAAS,kBAAM4D,GAA2BK,OAElDnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAI8F,KAG1BjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAIlBgG,EACGnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BqG,QAAQ,cAAnD,+CACAxG,EAAAC,EAAAC,cAAA,SACI+B,KAAK,OACL9B,UAAU,wBACVsG,YAAarG,EACbsG,GAAG,aACHC,UAAU,KACVC,MAAOxG,EACPyG,SAAU,SAACtF,GAAD,OAAO8E,EAAc9E,EAAEuF,OAAOF,QACxCG,QAAS,SAACxF,GAAD,OAAOA,EAAEuF,OAAOE,YAC7BhH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAEnBH,EAAAC,EAAAC,cAACwF,EAAD,CAAsBtF,WAAYA,EAAY0F,0BAA2BA,OAIrF9F,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,SAAU,GAAIZ,WAAYA,EAAYkE,eAAgBA,QD/CzE,MAAUN,SAASiD,eAAe","file":"static/js/main.43f2dca2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function ScoreBoard(props) {\r\n    return (\r\n        <div className=\"row score-board \">\r\n            <div className=\"col text-center\">\r\n\r\n                <h4>\r\n                    <span className=\"badge badge-pill badge-dark m-2\">{props.playerName || \"Player Name\"}</span>\r\n                    <span className=\"badge badge-pill badge-dark m-2\">Score:{props.score || \"0\"}</span>\r\n                </h4>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './GamePixel.css'\r\n\r\nexport default function GamePixel(props) {\r\n    let pixelHeight = props.pixelHeight || \"20px\";\r\n    let pixelWidth = props.pixelWidth || \"20px\";\r\n    return (\r\n        <div className={props.pixelType} style={{ height: pixelHeight, width: pixelWidth }} >\r\n            {props.key}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport GamePixel from \"../../components/GamePixel\";\r\n\r\nexport default function GameBoard({ gridSize, apple, isSnake }) {\r\n    return (\r\n        <div className=\"\">\r\n            {[...Array(gridSize)].map((e, rowIndex) =>\r\n                <div className=\"game-row \" key={rowIndex}>\r\n                    {\r\n                        [...Array(gridSize)].map((e, columnIndex) =>\r\n                            <div className=\"\" key={rowIndex + \"_\" + columnIndex}>\r\n                                <GamePixel pixelType={\r\n                                    (apple.x === rowIndex && apple.y === columnIndex) ? \" apple \" :\r\n                                        isSnake(rowIndex, columnIndex) ? \"snake\" :\r\n                                            \"square\"\r\n                                } />\r\n                            </div >)\r\n                    }\r\n                </div>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function GameMessage(props) {\r\n    //props.isPlaying [NOTSTARTED,PLAYING,PAUSED,ENDED]\r\n    return (\r\n        <div>\r\n            {props.isPlaying === \"PLAYING\" ?\r\n                <p className=\"text-muted\">Press 'Q' to Quit, or 'P' to pause the game.</p> :\r\n                props.isPlaying === \"ENDED\" ?\r\n                    <div class=\"card border-danger mb-3\" >\r\n                        <div class=\"card-header\">Well Done! #Sarcasm</div>\r\n                        <div class=\"card-body\">\r\n                            <h4 class=\"card-title \">Lord {props.playerName}</h4>\r\n                            <p class=\"card-text\">No. of Seconds Survived: {props.score}</p>\r\n                        </div>\r\n                    </div> :\r\n                    props.isPlaying === \"PAUSED\" ?\r\n                        <p className=\"text-muted\">\"Press 'Space Bar' or 'Enter' to Continue\"</p> :\r\n                        props.isPlaying === \"NOTSTARTED\" ?\r\n                            <p className=\"text-muted\">\"Press 'Space Bar' or 'Enter' to Start\"</p> :\r\n                            <p className=\"text-muted\"></p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ArrowButtons(props) {\r\n    //[NOTSTARTED,PLAYING,PAUSED,ENDED]\r\n    return (\r\n        <div className=\"row buttons\">\r\n            <div className=\"col-3\">\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={() => { props.endGame() }}>Quit</button>\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={() => {\r\n                    if (props.isPlaying === \"PLAYING\")\r\n                        props.stopGame();\r\n                    else if (props.isPlaying === \"PAUSED\" || props.isPlaying === \"ENDED\" || props.isPlaying === \"NOTSTARTED\")\r\n                        props.startGame();\r\n                    else {\r\n                        alert(\"lojaojfij\")\r\n                        console.log(props)\r\n                    }\r\n\r\n                }}> >  / | | </button>\r\n            </div>\r\n            <div className=\"col\">\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={() => props.setVelocity({ x: -1, y: 0 })}>W &uarr;</button> <br />\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={() => props.setVelocity({ x: 0, y: -1 })}>A &larr;</button>\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={() => props.setVelocity({ x: 1, y: 0 })}>S &darr;</button>\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={() => props.setVelocity({ x: 0, y: 1 })}>D &rarr;</button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={() => props.reverseDirection()} >Reverse</button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","\r\nimport React, { useState, useEffect, useReducer } from 'react'\r\nimport ScoreBoard from \"../../components/ScoreBoard\";\r\nimport { onKeyPressed } from \"./onKeyPressed\";\r\nimport { takeRight, take } from 'lodash'\r\nimport GameBoard from './GameBoard'\r\nimport GameMessage from \"./GameMessage\";\r\nimport ArrowButtons from './ArrowButtons';\r\n\r\nlet trail = [{ x: 10, y: 6 }, { x: 10, y: 7 }, { x: 10, y: 8 }, { x: 10, y: 9 }, { x: 10, y: 10 }]; //initial trail\r\nlet PlayerPosition = { x: 10, y: 10 } //starting PlayerPosition\r\nlet snakeSize = 4 //initialSize 4\r\nlet gameTick = null;\r\nlet velocity = { x: 0, y: 1 };\r\nlet gridSize = 20\r\nlet apple = {\r\n    x: Math.floor(Math.random() * gridSize),\r\n    y: Math.floor(Math.random() * gridSize)\r\n}\r\nlet totalTime = 0;\r\nlet cutOffTime = 2;\r\nlet direction = \"forward\";\r\nexport default function SnakeGame(props) {\r\n    gridSize = props.gridSize;\r\n    const [isPlaying, setIsPlaying] = useState(\"NOTSTARTED\")\r\n    const [, setVelocity] = useState({ x: 0, y: 1 })\r\n    const [, setPlayerPosition] = useState({ x: 10, y: 10 });\r\n\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", handleKeyPress);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", handleKeyPress);\r\n        };\r\n    }, [])\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n    }, [])\r\n    useEffect(() => {\r\n        chooseWormMessage()\r\n    })\r\n    return (\r\n        <>\r\n            <div className=\"game-board d-flex justify-content-center \">\r\n                <div className=\"mb-4\">\r\n                    <ScoreBoard playerName={props.playerName} score={totalTime.toFixed(2)} />\r\n                    <GameMessage score={totalTime.toFixed(2)} playerName={props.playerName} isPlaying={isPlaying} />\r\n                    <GameBoard gridSize={props.gridSize} apple={apple} isSnake={isSnake}></GameBoard>\r\n                </div>\r\n            </div>\r\n            <ArrowButtons\r\n                isPlaying={isPlaying}\r\n                startGame={startGame}\r\n                stopGame={stopGame}\r\n                setVelocity={setVelocity2}\r\n                reverseDirection={reverseDirection}\r\n                endGame={endGame} />\r\n            <hr />\r\n            <div className=\"row instructions text-center\">\r\n                <div className=\"col\">\r\n                    <h3>How to Play?</h3>\r\n                    <p>Acid Rain is killing the worms, every 2 seconds a part of the worm dies, you have to be quick.<br />\r\n                        Press 'Space' or 'Enter' to start the game.<br />\r\n                        Press 'Escape' or 'P' to Pause the game. <br />\r\n                        Use the Arrow Keys, or (WASD) to guide the worm.<br />\r\n                        This is not a snake game it's a worm game, worms do not bite themselves( Actually neither do snakes, but anyways), so making them bite their own tails won't kill the worms.<br />\r\n                        And, Earthworms can eat form either of their heads, so just press the 'R' key to change the eating mouth<br />\r\n                        It is a race against time.\r\n                        </p>\r\n                </div>\r\n            </div>\r\n        </>)\r\n    function chooseWormMessage() {\r\n        if (totalTime <= 10) {\r\n            props.setWormMessage(\"Feed Me, Its Dinner Time Already\")\r\n        } else if (totalTime > 10 && totalTime <= 20) {\r\n            props.setWormMessage(\"Woohoo! You are proving yourself to be worthy!!\")\r\n        }\r\n        else if (totalTime > 20 && totalTime <= 30) {\r\n            props.setWormMessage(\"Holy Gaga, in the 20-20 league!!\")\r\n        }\r\n        else if (totalTime > 30) {\r\n            props.setWormMessage(\"Poocho Satra, You know where your apples are\")\r\n        }\r\n\r\n    }\r\n    function handleKeyPress(e) {\r\n        onKeyPressed(e, startGame, stopGame, velocity, setVelocity2, reverseDirection, endGame);\r\n    }\r\n    // function scoreBoardReducer(state, action) {\r\n    //     switch (action.type) {\r\n    //         case 'playerName':\r\n    //             return { ...state, ...{ playerName: action.playerName } };\r\n    //         case 'incrementPlayerScore':\r\n    //             return { ...state, ...{ playerScore: state.playerScore + 1 } };\r\n    //         case 'decrementPlayerScore':\r\n    //             return { ...state, ...{ playerScore: state.playerScore - 1 } };\r\n    //         default:\r\n    //             throw new Error();\r\n    //     }\r\n    // }\r\n    function setVelocity2(payload) {\r\n        velocity = payload;\r\n        setVelocity(payload);\r\n    }\r\n\r\n    function game() {\r\n        // chooseWormMessage()\r\n        totalTime += 0.1;\r\n        cutOffTime -= 0.1;\r\n        let newXPosition = PlayerPosition.x + velocity.x;\r\n        let newYPosition = PlayerPosition.y + velocity.y;\r\n\r\n        if (newXPosition < 0) {\r\n            newXPosition = props.gridSize - 1;\r\n        }\r\n        else if (newXPosition > props.gridSize - 1) {\r\n            newXPosition = 0;\r\n        }\r\n        if (newYPosition < 0) {\r\n            newYPosition = props.gridSize - 1;\r\n        }\r\n        else if (newYPosition > props.gridSize - 1) {\r\n            newYPosition = 0;\r\n        }\r\n        setPlayerPosition({ x: newXPosition, y: newYPosition })\r\n        PlayerPosition = { x: newXPosition, y: newYPosition };\r\n        if (isSnake(newXPosition, newYPosition)) {\r\n            // snakeSize = 4;\r\n            // endGame();\r\n        }\r\n        if (direction === \"forward\") {\r\n            trail.push({ x: newXPosition, y: newYPosition })\r\n        }\r\n        else {\r\n            trail.unshift({ x: newXPosition, y: newYPosition })\r\n        }\r\n\r\n        //while (trailCopy.length > snakeSize) {\r\n        if (trail.length > snakeSize) {\r\n            // ordTrail.shift()\r\n            // setTrail(trailCopy.slice(snakeSize))\r\n            trail = direction === \"forward\" ? takeRight(trail, snakeSize) : take(trail, snakeSize);\r\n        }\r\n        // setTrail(trailCopy);\r\n        if (apple.x === newXPosition && apple.y === newYPosition) {\r\n            // setPlayerScore(playerScore + 1)\r\n            // setSnakeSize(snakeSize + 1)\r\n            snakeSize += 1;\r\n            apple = {\r\n                x: Math.floor(Math.random() * props.gridSize),\r\n                y: Math.floor(Math.random() * props.gridSize)\r\n            }\r\n        }\r\n        if (cutOffTime <= 0) {\r\n            cutOffTime = 2;\r\n            if (snakeSize <= 1) {\r\n                endGame();\r\n            }\r\n            snakeSize -= 1;\r\n        }\r\n    }\r\n    function startGame() {\r\n        trail = [{ x: 10, y: 6 }, { x: 10, y: 7 }, { x: 10, y: 8 }, { x: 10, y: 9 }, { x: 10, y: 10 }]; //initial trail\r\n        PlayerPosition = { x: 10, y: 10 } //starting PlayerPosition\r\n        snakeSize = 5 //initialSize 4\r\n        gameTick = null;\r\n        velocity = { x: 0, y: 1 };\r\n        gridSize = 20\r\n        if (isPlaying != \"NOTSTARTED\") {\r\n            apple = {\r\n                x: Math.floor(Math.random() * gridSize),\r\n                y: Math.floor(Math.random() * gridSize)\r\n            }\r\n        }\r\n        totalTime = 0;\r\n        gameTick = setInterval(game, 1000 / 10)\r\n        setIsPlaying(\"PLAYING\")\r\n    }\r\n    function stopGame() {\r\n        clearInterval(gameTick)\r\n        gameTick = null;\r\n        setIsPlaying(\"PAUSED\")\r\n    }\r\n    function endGame() {\r\n        stopGame();\r\n        setIsPlaying(\"ENDED\")\r\n    }\r\n    function reverseDirection() {\r\n        PlayerPosition = direction === \"forward\" ? take(trail)[0] : takeRight(trail)[0]\r\n        velocity = {\r\n            x: velocity.x * -1,\r\n            y: velocity.y * -1,\r\n        }\r\n\r\n        // reverse(trail)\r\n        direction = direction === \"forward\" ? \"reverse\" : \"forward\";\r\n\r\n    }\r\n    function isSnake(x, y) {\r\n        if (trail.find(obj => obj.x === x && obj.y === y)) {\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n\r\n","export function onKeyPressed(e, startGame, stopGame, velocity, setVelocity, reverseDirection, endGame) {\r\n\r\n    switch (e.code) {\r\n        case \"Space\":\r\n        case \"Enter\":\r\n            e.preventDefault();\r\n            startGame();\r\n            break;\r\n        case \"Escape\":\r\n            stopGame();\r\n            break;\r\n        case \"KeyA\":\r\n        case \"ArrowLeft\":\r\n            e.preventDefault();\r\n            setVelocity({ x: 0, y: -1 })\r\n            break;\r\n        case \"KeyW\":\r\n        case \"ArrowUp\":\r\n            e.preventDefault();\r\n            setVelocity({ x: -1, y: 0 })\r\n            break;\r\n        case \"KeyD\":\r\n        case \"ArrowRight\":\r\n            e.preventDefault();\r\n            setVelocity({ x: 0, y: 1 })\r\n            break;\r\n        case \"KeyS\":\r\n        case \"ArrowDown\":\r\n            e.preventDefault();\r\n            setVelocity({ x: 1, y: 0 })\r\n            break;\r\n        case \"KeyR\":\r\n            reverseDirection();\r\n            break;\r\n        case \"KeyQ\":\r\n            endGame();\r\n            break;\r\n        default:\r\n            //uselessKey pressed\r\n            break;\r\n    }\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Instructions(props) {\r\n    const [acceptButtonMessage, setAcceptButtonMessage] = useState(\"Got It!\")\r\n    return (\r\n        <>\r\n            <h4 className=\"display-4\">Instructions</h4>\r\n            <p className=\"lead\">\r\n                EarthWorm- \"I used to be happy this time of the year.\r\n                Every time it rained I got to meet my introverted Cousins, as the rains would push them out of their homes. We used to have a feast roaming and chugging up.\r\n                Things have changed now, the water stings, and food is nowhere to be found.\r\n                This time it is just me. I guess I am the last one.\r\n                We have been forced to have an apples only diet, but we don't know where these apples are, guide us to the apples, before the stinging ends forever.\r\n                        At this dire hour you are our only hope {props.playerName}.\r\nDo this and you will find your place in one of my 5 Hearts.\r\n                        You are our last hope, help us!!\"</p>\r\n            <hr className=\"my-4\" />\r\n            <p>\r\n                Acid Rain is killing the worms, every 2 seconds a part of the worm dies, you have to be quick.<br />\r\n                Press 'Space' or 'Enter' to start the game.<br />\r\n                Press 'Escape' or 'P' to Pause the game. <br />\r\n                Use the Arrow Keys, or (WASD) to guide the worm.<br />\r\n                This is not a snake game it's a worm game, worms do not bite themselves( Actually neither do snakes, but anyways), so making them bite their own tails won't kill the worms.<br />\r\n                And, Earthworms can eat form either of their heads, so just press the 'R' key to change the eating mouth<br />\r\n                It is a race against time.<br />\r\n            </p>\r\n            <p className=\"lead \">\r\n                <button className=\"btn btn-primary btn-lg\"\r\n                    onClick={() => setAcceptButtonMessage(\"Seriously! I hope you got this! Counting on you\")}\r\n                    onDoubleClick={(e) => {\r\n                        e.preventDefault();\r\n                        props.setInstructionDivVisibile(false);\r\n                    }}>\r\n                    {acceptButtonMessage}\r\n                </button>\r\n                {acceptButtonMessage === \"Seriously! I hope you got this! Counting on you\" ?\r\n                    <span className=\"text-muted\"><br />(Double Click to Enter :)</span> :\r\n                    null}\r\n            </p>\r\n            <p className=\"text-muted\">(Click on the Apple & worm image on top Read instructions again)</p>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport App2 from './App2';\n\nReactDOM.render(<App2 />, document.getElementById('root'));\n","import React, { useState } from 'react'\r\nimport SnakeGame from \"./Games/SnakeGame\"\r\nimport WormGameInstructions from \"./Games/SnakeGame/Instructions\"\r\nimport './index2.css'\r\n\r\nexport default function App2() {\r\n    const [wormMessage, setWormMessage] = useState(\"Feed Me Right Now\")\r\n    const [instructionDivVisibile, setInstructionDivVisibile] = useState(true)\r\n    const [playerName, setPlayerName] = useState(\"GuestUser\" + Math.floor(Math.random() * 1000));\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row \">\r\n                <div className=\"col text-center\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-3\"></div>\r\n                        <div className=\"col-1\">\r\n                            <img\r\n                                src=\"./apple-e-worm.png\"\r\n                                alt=\"apple-earthworm\"\r\n                                className=\"worm-icon img-fluid rounded mx-auto d-block\"\r\n                                onClick={() => setInstructionDivVisibile(!instructionDivVisibile)} />\r\n                        </div>\r\n                        <div className=\"col-5 \">\r\n                            <div className=\"card border-primary mt-3 p-2\">\r\n                                <h2 className=\"\">{wormMessage}</h2>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-3\"></div>\r\n                    </div>\r\n                    {/* <span className=\"border-top my-3\" /> */}\r\n\r\n                    {instructionDivVisibile ?\r\n                        <div className=\"row\">\r\n                            <div className=\"col \">\r\n                                <div className=\"jumbotron m-2\">\r\n                                    <div className=\"form-group row text-center\">\r\n                                        <div className=\"col\"></div>\r\n                                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"playerName\">Please Enter Your Name, Wormhearted Saviour</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"col-sm-3 form-control\"\r\n                                            placeholder={playerName}\r\n                                            id=\"playerName\"\r\n                                            maxLength=\"15\"\r\n                                            value={playerName}\r\n                                            onChange={(e) => setPlayerName(e.target.value)}\r\n                                            onFocus={(e) => e.target.select()} />\r\n                                        <div className=\"col\"></div>\r\n                                    </div>\r\n                                    <WormGameInstructions playerName={playerName} setInstructionDivVisibile={setInstructionDivVisibile} />\r\n                                </div>\r\n                            </div>\r\n                        </div> :\r\n                        <SnakeGame gridSize={20} playerName={playerName} setWormMessage={setWormMessage} />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n    // function getResolution() {\r\n    //     alert(\"Your screen resolution is: \" + window.screen.width * window.devicePixelRatio + \"x\" + window.screen.height * window.devicePixelRatio);\r\n    // }\r\n}\r\n"],"sourceRoot":""}